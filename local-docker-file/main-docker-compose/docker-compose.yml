#---------------------------------------------------------
# This command will start the containers in detached mode without rebuilding the images (If they already exist)
# 1. docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d
# This command forces the rebuild of images, even if the images already exist, before starting the containers
# 2. docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d --build
# 3. docker build -t product-service:1.0 .
#---------------------------------------------------------
#this file should exist in the root of the project
#version: '3.9'

services:

  product-service:
    image: product-service
    #ports match with Dockerfile
    #Left side is for localhost. Right side port is docker internal ports
    ports:
      - "8084:8084"
    build:
      context: ../../product-service #The directory where the dockerfile resides
      dockerfile: ./Dockerfile
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  api-gateway:
    image: api-gateway
    #ports match with Dockerfile
    #Left side is for localhost. Right side port is docker internal ports
    ports:
      - "9000:9000"
    build:
      context: ../../api-gateway #The directory where the dockerfile resides
      dockerfile: ./Dockerfile
    container_name: api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - keycloak
    networks:
      - spring


  mongodb:
    image: mongo:latest
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js/mongo-init.js:/init/mongo/docker-entrypoint-initdb.d/mongo-init.js/mongo-init.js:ro #ro is delete the next queue
    #restart: unless-stopped #docker will restart until we manually stop it
    container_name: mongodb-3095
    #command: mongod -auth
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express-3095
    depends_on:
      - mongodb
    networks:
      - spring

  order-service:
    image: order-service
    #ports match with Dockerfile
    #Left side is for localhost. Right side port is docker internal ports
    ports:
      - "8082:8082"
    build:
      context: ../../order-service #The directory where the dockerfile resides
      dockerfile: ./Dockerfile
    container_name: order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-order
    networks:
      - spring

  inventory-service:
    image: inventory-service
    #ports match with Dockerfile
    #Left side is for localhost. Right side port is docker internal ports
    ports:
      - "8083:8083"
    build:
      context: ../../inventory-service #The directory where the dockerfile resides
      dockerfile: ./Dockerfile
    container_name: inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-inventory
    networks:
      - spring


  postgres-inventory:
    image: postgres
    ports:
      - "5434:5432" #For Inventory services
    container_name: postgres-inventory
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory-service
    volumes:
      - ./data/inventory:/var/lib/postgresql/data/
      - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  postgres-order:
    image: postgres
    ports:
      - "5433:5432" #For order services
    container_name: postgres-order
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=order-service
    volumes:
      - ./data/order:/var/lib/postgresql/data/
      - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring


  postgres-keycloak:
    image: postgres
    ports:
      - "5431:5432" #Postgres default
    container_name: postgres-keycloak
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/keycloak:/var/lib/postgresql/data/
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80" #pgadmin default
    container_name: pgadmin-dpage
    environment:
      - PGADMIN_DEFAULT_EMAIL=101434395@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password


volumes:
  mongodb-db:
    driver: local
  postgres:
    driver: local

networks:
    spring:
      driver: bridge

