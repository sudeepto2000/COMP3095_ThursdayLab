#---------------------------------------------------------
# This command will start the containers in detached mode without rebuilding the images (If they already exist)
# 1. docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d
# This command forces the rebuild of images, even if the images already exist, before starting the containers
# 2. docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d --build
# 3. docker build -t product-service:1.0 .
#---------------------------------------------------------
#this file should exist in the root of the project
#version: '3.9'

services:

  product-service:
    image: product-service
    #ports match with Dockerfile
    ports:
      - "8085:8085"
    build:
      context: ../../product-service #The directory where the dockerfile resides
      dockerfile: ./Dockerfile
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring


  mongodb:
    image: mongo:latest
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js/mongo-init.js:/init/mongo/docker-entrypoint-initdb.d/mongo-init.js/mongo-init.js:ro #ro is delete the next queue
    #restart: unless-stopped #docker will restart until we manually stop it
    container_name: mongodb-3095
    #command: mongod -auth
    networks:
      - spring

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express-3095
    depends_on:
      - mongodb
    networks:
      - spring


volumes:
  mongodb-db:
    driver: local

networks:
    spring:
      driver: bridge

